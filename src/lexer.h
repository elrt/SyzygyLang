#ifndef LEXER_H
#define LEXER_H

#define MAX_TOKENS 2000
#define MAX_TOKEN_LEN 100
#define MAX_IDENTIFIER_LEN 48

typedef enum {
    //basic tokenz
    TOKEN_RING, TOKEN_MODULE, TOKEN_GENERATORS, TOKEN_RELATIONS,
    TOKEN_HOMOMORPHISM, TOKEN_IDENTIFIER, TOKEN_EQUALS, TOKEN_PLUS,
    TOKEN_MINUS, TOKEN_STAR, TOKEN_SLASH, TOKEN_MOD, TOKEN_LPAREN,
    TOKEN_RPAREN, TOKEN_LBRACE, TOKEN_RBRACE, TOKEN_COMMA, TOKEN_SEMICOLON,
    TOKEN_ARROW, TOKEN_EOF, TOKEN_NUMBER, TOKEN_IN, TOKEN_INTEGERS_MOD,
    TOKEN_RATIONALS, TOKEN_FREE_MODULE, TOKEN_STRING,

    //algebraic control structures
    TOKEN_DEFINE, TOKEN_AS, TOKEN_WHERE, TOKEN_CASE, TOKEN_OF,
    TOKEN_RECURSIVE, TOKEN_FIXED_POINT, TOKEN_MORPHISM, TOKEN_ENDOMORPHISM,
    TOKEN_KERNEL, TOKEN_IMAGE, TOKEN_COMPOSE, TOKEN_APPLY, TOKEN_MAP,
    TOKEN_FOLD, TOKEN_UNFOLD, TOKEN_COLIMIT, TOKEN_LIMIT, TOKEN_FILTER,
    TOKEN_LAMBDA, TOKEN_WITH, TOKEN_INITIAL,

    //comparison operators
    TOKEN_LT, TOKEN_GT, TOKEN_LE, TOKEN_GE, TOKEN_EQ, TOKEN_NE,

    TOKEN_COLON, TOKEN_LBRACKET, TOKEN_RBRACKET, TOKEN_UNDERSCORE,
    TOKEN_DOT
} TokenType;

typedef struct {
    TokenType type;
    char value[MAX_TOKEN_LEN];
} Token;

int tokenize(const char* input, Token* tokens, int* token_count);

#endif
